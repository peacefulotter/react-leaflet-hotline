{"/":{"title":"Index","data":{"introduction#Introduction":"The demo below presents the hotline out of the box, with only the coordinates to draw the line. \nProps can be passed to the component (and hook) to customize the hotline. \nPlease see the playground to see the effects of changing the various props.\nSee code\nimport MapWrapper from \"./map/MapWrapper\";\nimport { Hotline } from 'react-leaflet-hotline';\nconst data = [\n    { lat: 55.7620299, lng: 12.5197298, value: 1 },\n    { lat: 55.7598755, lng: 12.5177353, value: 8 },\n    { lat: 55.7587234, lng: 12.5158659, value: 4 },\n]\nexport default function Demo() {\n\treturn (\n\t\t<MapWrapper>\n\t\t\t<Hotline\n\t\t\t\tdata={data} \n\t\t\t\tgetLat={({ point }) => point.lat}\n        \t\tgetLng={({ point }) => point.lng}\n        \t\tgetVal={({ point }) => point.value} />\n\t\t</MapWrapper>\n\t)\n}","options#Options":"Options can be passed to the Hotline component and the useHotline hook. Some options are 'tracked',\ni.e. they can be defined as a react state and changes will be reflected automatically on the hotline.\nSee more","event-handlers#Event handlers":"Events can be handled by the eventHandlers prop. Since the package is based on react-leaflet, all events supported by react-leaflet\nare also supported by the hotline.","multipolyline#MultiPolyline":"MultiPolyline consists of multiple polylines grouped into one layer. They thus share the same options and eventHandlers,\nand are useful when working with multiple distinct lines that should behave similarly.","hook#Hook":"The Hotline component is based on the useHotline hook, which is also exported and can be used in the same way as the component."}}}